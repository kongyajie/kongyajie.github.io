(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{474:function(t,v,r){"use strict";r.r(v);var _=r(10),a=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"链表概览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链表概览"}},[t._v("#")]),t._v(" 链表概览")]),t._v(" "),v("h2",{attrs:{id:"链表是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链表是什么"}},[t._v("#")]),t._v(" 链表是什么？")]),t._v(" "),v("ul",[v("li",[t._v("多个元素组成的列表")]),t._v(" "),v("li",[t._v("元素存储不连续，用next指针连在一起")])]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("ul",[v("li",[t._v("链表里的元素存储不是连续的，之前通过 next 连接")]),t._v(" "),v("li",[t._v("JavaScript 中没有链表，但可以用 Object 模拟链表")]),t._v(" "),v("li",[t._v("链表常用操作："),v("strong",[t._v("修改next、遍历链表")])]),t._v(" "),v("li",[t._v("JS中的原型链也是一个链表（沿着proto指针）")]),t._v(" "),v("li",[t._v("使用链表指针可以获取嵌套JSON的节点值")])]),t._v(" "),v("h2",{attrs:{id:"特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),v("p",[t._v("用一组任意存储的单元来存储线性表的数据元素。一个对象存储着本身的值和下一个元素的地址。")]),t._v(" "),v("ul",[v("li",[t._v("需要遍历才能查询到元素，查询慢。")]),t._v(" "),v("li",[t._v("插入元素只需断开连接重新赋值，插入快。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://i.loli.net/2019/08/18/K7ysIF3qXzTJxUN.jpg",alt:""}})]),t._v(" "),v("p",[t._v("链表在开发中也是经常用到的数据结构，"),v("code",[t._v("React16")]),t._v(" 的 "),v("code",[t._v("Fiber Node")]),t._v(" 连接起来形成的"),v("code",[t._v("Fiber Tree")]),t._v(", 就是个单链表结构。")]),t._v(" "),v("h2",{attrs:{id:"基本应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本应用"}},[t._v("#")]),t._v(" 基本应用")]),t._v(" "),v("blockquote",[v("p",[t._v("主要是对链表基本概念和特性的应用，如果基础概念掌握牢靠，此类问题即可迎刃而解")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/从尾到头打印链表.html"}},[t._v("从尾到头打印链表")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/删除链表中的节点.html"}},[t._v("删除链表中的节点")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/反转链表.html"}},[t._v("反转链表")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/复杂链表的复制.html"}},[t._v("复杂链表的复制")])],1)]),t._v(" "),v("h2",{attrs:{id:"环类题目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#环类题目"}},[t._v("#")]),t._v(" 环类题目")]),t._v(" "),v("blockquote",[v("p",[t._v("环类题目即从判断一个单链表是否存在循环而扩展衍生的问题")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/141-环形链表.html"}},[t._v("141-环形链表")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/链表环的入口节点.html"}},[t._v("链表环的入口节点")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/'./约瑟夫环.html"}},[t._v("约瑟夫环")])],1)]),t._v(" "),v("h2",{attrs:{id:"双指针"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),v("blockquote",[v("p",[t._v("双指针的思想在链表和数组中的题目都经常会用到，主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。")])]),t._v(" "),v("ul",[v("li",[t._v("两个指针从不同位置出发：一个从始端开始，另一个从末端开始；")]),t._v(" "),v("li",[t._v("两个指针以不同速度移动：一个指针快一些，另一个指针慢一些。")])]),t._v(" "),v("p",[t._v("对于单链表，因为我们只能在一个方向上遍历链表，所以第一种情景可能无法工作。然而，第二种情景，也被称为慢指针和快指针技巧，是非常有用的。")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/两个链表的公共节点.html"}},[t._v("两个链表的公共节点")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/链表倒数第k个节点.html"}},[t._v("链表倒数第k个节点")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/相交链表.html"}},[t._v("相交链表")])],1)]),t._v(" "),v("h2",{attrs:{id:"双向链表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),v("p",[t._v("双链还有一个引用字段，称为"),v("code",[t._v("prev")]),t._v("字段。有了这个额外的字段，您就能够知道当前结点的前一个结点。")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/article/数据结构与算法/数据结构/链表/扁平化多级双向链表.html"}},[t._v("扁平化多级双向链表")])],1)])])}),[],!1,null,null,null);v.default=a.exports}}]);