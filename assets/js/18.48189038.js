(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{308:function(t,a,s){"use strict";s.r(a);var v=s(10),r=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript系列之4-原型与原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript系列之4-原型与原型链"}},[t._v("#")]),t._v(" JavaScript系列之4-原型与原型链")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("编程范型、编程范式或程序设计法")]),t._v("（英语：Programming paradigm），是指软件工程中的一类典型的编程风格。常见的编程范型有：函数式编程、指令式编程、过程式编程、面向对象编程等等。 —— "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("JavaScript是基于"),a("strong",[t._v("原型编程范式")]),t._v("来实现面向对象的。原型编程范式的核心思想就是"),a("strong",[t._v("利用实例来描述对象，用实例作为定义对象和继承的基础")]),t._v("。")]),t._v(" "),a("p",[t._v("在 JavaScript 中，原型编程范式的体现就是基于原型链的继承。这其中，对原型、原型链的理解是关键。")]),t._v(" "),a("p",[t._v("本文分为以下几个部分：")]),t._v(" "),a("ul",[a("li",[t._v("原型和原型链案例")]),t._v(" "),a("li",[t._v("JavaScript是如何设计对象的？")]),t._v(" "),a("li",[t._v("JavaScript是如何实现面向对象的？")]),t._v(" "),a("li",[t._v("对象的创建")]),t._v(" "),a("li",[t._v("对象的继承")])]),t._v(" "),a("h2",{attrs:{id:"一、原型和原型链案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、原型和原型链案例"}},[t._v("#")]),t._v(" 一、原型和原型链案例")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("funciton "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("eat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'吃饭'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Aaron'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://oss-1252175178.cos.ap-shanghai.myqcloud.com/JS%E5%8E%9F%E5%9E%8B%E9%93%BE.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("构造函数 "),a("code",[t._v("Person")])]),t._v(" "),a("li",[t._v("原型 "),a("code",[t._v("Person.prototype")])]),t._v(" "),a("li",[t._v("原型的构造函数 "),a("code",[t._v("Person.prototype.constructor")])]),t._v(" "),a("li",[t._v("实例的原型属性 "),a("code",[t._v("person.__proto__")])]),t._v(" "),a("li",[t._v("原型的原型属性 "),a("code",[t._v("Person.prototype.__proto__")])])]),t._v(" "),a("h2",{attrs:{id:"二、javascript是如何设计对象的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、javascript是如何设计对象的"}},[t._v("#")]),t._v(" 二、JavaScript是如何设计对象的？")]),t._v(" "),a("p",[t._v("我们知道对象的三要素有：")]),t._v(" "),a("ul",[a("li",[t._v("唯一性：即使完全相同的两个对象，也并非同一个对象")]),t._v(" "),a("li",[t._v("状态：对象的状态，同一对象可能处于不同的状态之下")]),t._v(" "),a("li",[t._v("行为：可能因为行为产生状态变迁")])]),t._v(" "),a("p",[t._v("而JavaScript设计对象时，将对象设计成为了："),a("strong",[t._v("具有高度动态性的属性集合")]),t._v("。具体表现在：")]),t._v(" "),a("ol",[a("li",[t._v("将状态和行为抽象成了属性")]),t._v(" "),a("li",[t._v("支持动态添加状态和行为")])]),t._v(" "),a("p",[t._v("为了支持上述的设计，JavaScript的属性被设计成两类："),a("strong",[t._v("数据属性")]),t._v(" 和 "),a("strong",[t._v("访问器属性")]),t._v("，而且通过一组特征来描述属性：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("数据属性")]),t._v("，接近其他语言的属性概念，通常我们定义的都是数据属性\n"),a("ul",[a("li",[t._v("value：属性的值")]),t._v(" "),a("li",[t._v("writable：决定属性能否被赋值")]),t._v(" "),a("li",[t._v("enumerable：决定 for in 能否枚举该属性")]),t._v(" "),a("li",[t._v("configurable：决定该属性能否被删除或者改变特征值")])])]),t._v(" "),a("li",[a("strong",[t._v("访问器属性")]),t._v("，可以通过 Object.defineProperty 来定义\n"),a("ul",[a("li",[t._v("getter：函数或 undefined，在取属性值时被调用")]),t._v(" "),a("li",[t._v("setter：函数或 undefined，在设置属性值时被调用")]),t._v(" "),a("li",[t._v("enumerable：决定 for in 能否枚举该属性")]),t._v(" "),a("li",[t._v("configurable：决定该属性能否被删除或者改变特征值\n用 Object.getOwnPropertyDescriptor 来查看属性的特征")])])])]),t._v(" "),a("p",[a("strong",[t._v("综上，实际上 JavaScript 对象的运行时是一个“属性的集合”，属性以字符串或者 Symbol 为 key，以数据属性特征值或者访问器属性特征值为 value。")])]),t._v(" "),a("h2",{attrs:{id:"三、javascript是如何实现面向对象的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、javascript是如何实现面向对象的"}},[t._v("#")]),t._v(" 三、JavaScript是如何实现面向对象的？")]),t._v(" "),a("blockquote",[a("p",[t._v("JavaScript是基于原型的面向对象语言")])]),t._v(" "),a("h3",{attrs:{id:"_1、基于原型vs基于类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、基于原型vs基于类"}},[t._v("#")]),t._v(" 1、基于原型vs基于类")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript 使用了基于原型的方式实现面向对象，而不是基于类的方式。")]),t._v(" "),a("li",[t._v("由于公司政治原因，JavaScript 推出之时，管理层就要求它去模仿 Java，Brendan Eich在原型基础上引入了new、this等语言特性，使之语法看起来更像Java。")]),t._v(" "),a("li",[t._v("基于原型和基于类都能够满足基本的复用和抽象需求，它们的区别在于：基于原型强调行为，基于类则强调分类。猫->老虎（大猫），猫->老虎（猫科动物）")])]),t._v(" "),a("h3",{attrs:{id:"_2、原型系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、原型系统"}},[t._v("#")]),t._v(" 2、原型系统")]),t._v(" "),a("p",[t._v("抛开Java类的复杂语法设施(new、Function Object、函数的prototype属性等),其实原型系统相当简单:")]),t._v(" "),a("ul",[a("li",[t._v("对象的原型上都有私有字段"),a("code",[t._v("[[prototype]]")])]),t._v(" "),a("li",[t._v("对象上读取一个属性，如果当前对象本身没有，则会继续访问对象的原型，直到找到或原型为空为止")])]),t._v(" "),a("p",[t._v("早前，程序员只能通过Java风格的类接口来操纵原型运行时，ES6则提供内置函数来操纵原型：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.create")]),t._v(" 根据指定的原型创建新对象，原型可以是null")]),t._v(" "),a("li",[a("code",[t._v("Object.getPrototypeOf")]),t._v(" 获得一个对象的原型")]),t._v(" "),a("li",[a("code",[t._v("Object.setPrototypeOf")]),t._v(" 设置一个对象的原型")])]),t._v(" "),a("h3",{attrs:{id:"_3、javascript中的类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、javascript中的类"}},[t._v("#")]),t._v(" 3、JavaScript中的类")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("ES3以前很弱，仅仅是运行时的一个私有字符串属性"),a("code",[t._v("[[class]]")]),t._v("，通过"),a("code",[t._v("Object.prototype.toString")]),t._v(" 获取")])]),t._v(" "),a("li",[a("p",[t._v("ES5开始，"),a("code",[t._v("[[class]]")]),t._v(" 被 "),a("code",[t._v("Symbol.toStringTag")]),t._v(" 代替，"),a("code",[t._v("Object.prototype.toString")]),t._v(" 的意义从命名上不再跟 class 相关")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("new")]),t._v(" 可以理解为JavaScript面向对象的一部分，new运算接收一个构造器和一组调用函数，实际上做了几件事：")]),t._v(" "),a("ol",[a("li",[t._v("以构造器的 prototype 属性为原型，创建新对象；")]),t._v(" "),a("li",[t._v("将 this 和调用参数传给构造器，执行；")]),t._v(" "),a("li",[t._v("如果构造器返回的是对象，则返回，否则返回第一步创建的对象。")])])]),t._v(" "),a("li",[a("p",[t._v("ES6加入了新特性 "),a("code",[t._v("class")]),t._v(" ，"),a("code",[t._v("new")]),t._v(" 跟 "),a("code",[t._v("function")]),t._v(" 搭配的怪异行为终于可以退休了（虽然运行时没有变），在任何场景，都推荐使用ES6的语法来定义类，而令"),a("code",[t._v("function")]),t._v(" 回归原本的函数语义。")])])]),t._v(" "),a("h2",{attrs:{id:"对象的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建"}},[t._v("#")]),t._v(" 对象的创建")]),t._v(" "),a("h2",{attrs:{id:"对象的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的继承"}},[t._v("#")]),t._v(" 对象的继承")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")])])}),[],!1,null,null,null);a.default=r.exports}}]);