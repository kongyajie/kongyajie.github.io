(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{516:function(v,_,t){"use strict";t.r(_);var a=t(10),s=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"如何创造一门语言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何创造一门语言"}},[v._v("#")]),v._v(" 如何创造一门语言？")]),v._v(" "),_("p",[v._v("（转载自 https://www.cnblogs.com/fanzhidongyzby/p/5769045.html）")]),v._v(" "),_("p",[v._v("编程语言，作为人与计算机沟通的桥梁，有着重要和深远的意义。有过计算机编程经验的人，多少学习或掌握过一到多种编程语言。计算机专业领域的编程语言成百上千种，主流的编程语言也有数十种之多。每种编程语言面向的领域和特性都不尽相同，不过归根结底是为了解决人与计算机之间沟通的效率问题，提高计算机的生产力。想必有不少人对那些主流编程语言的创造者十分倾佩，也相信有不少人会好奇一门编程语言是如何诞生的。那么如何创造一门编程语言呢？")]),v._v(" "),_("p",[v._v("总的来看，创造一门编程语言需要有以下几个过程：")]),v._v(" "),_("p",[v._v("（1）设计语言的特性。")]),v._v(" "),_("p",[v._v("（2）定义语言的单词、语法和语义。")]),v._v(" "),_("p",[v._v("（3）实现编译器或者解释器将程序翻译为计算机底层表示。")]),v._v(" "),_("p",[v._v("（4）生成计算机程序的二进制存储格式。")]),v._v(" "),_("p",[v._v("（5）完善语言的运行时环境和标准库。")]),v._v(" "),_("h2",{attrs:{id:"一、语言特性设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、语言特性设计"}},[v._v("#")]),v._v(" 一、语言特性设计")]),v._v(" "),_("p",[v._v("所谓语言特性，就是编程语言为开发者提供了什么样的原子性功能特征。比如是否支持数学表达式计算、字符串处理，是否支持变量、函数和递归，是否支持分支、循环复合语句等。语言的变量类型是强类型、弱类型，还是动态类型，程序是过程式、函数式，还是面向对象的。是否支持模板、泛型和反射机制，是否支持多线程和并发特性，是否支持错误和异常处理机制等等。")]),v._v(" "),_("p",[v._v("语言特性设计是一门编程语言最关键的环节，直接决定了语言的基本特征和雏形。当然，这也是最难的一个环节，因为语言设计是面向具体问题领域的，是语言设计者从大量的编程实践中的获得的总结和升华。比如C语言设计者希望面向计算机底层，拥有对操作系统和硬件的直接操纵能力。而Python的设计者则希望尽可能地减少操作计算机资源的繁琐过程，以获得语言的简洁性、高度的灵活性和扩展性。SQL的设计者面向具体的数据查询和分析领域，希望帮助开发者获得快速检索和操纵数据的能力。而Go语言的设计者则希望在保留C语言优秀功能的基础上，扩展编程语言对高并发环境的支持，并拥有垃圾回收和快速编译的能力。")]),v._v(" "),_("p",[v._v("凡此种种，编程语言特性的设计都是面向具体的问题领域的，是语言设计者构建于开发者和计算机之间的中间层，是对开发过程中重复功能逻辑的原子性“封装”，最终的目的是为了提升具体问题领域内的软件开发效率。")]),v._v(" "),_("h2",{attrs:{id:"二、单词、语法和语义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、单词、语法和语义"}},[v._v("#")]),v._v(" 二、单词、语法和语义")]),v._v(" "),_("p",[v._v("和人类使用的自然语言类似，编程语言也有自身的单词、语法和语义，专业上称为词法记号、语言文法和语义。")]),v._v(" "),_("p",[v._v("常见的词法记号可以分为数字、字符、字符串、标识符、关键字，以及用于连接表达式的运算符、分割语句或者程序段落的界符等符号。这些是编程语言程序的基本单位，通过它们的有序组合，构建出了一门编程语言形形色色的代码片段。")]),v._v(" "),_("p",[v._v("编程语言的文法是用来描述语言的语法规则的，具体来说是规定词法记号之间的排列组合的顺序与规则。它描述了编程语言程序的基本模式，不符合该模式的词法记号的排列被挡在了合法语言程序的大门之外。同时，它也是各种编程语言对于开发者最明显的差异化特征。一个有经验的开发者可以很容易地通过扫视一段代码，就能分辨出这是哪种编程语言编写的计算机程序。")]),v._v(" "),_("p",[v._v("编程语言的语义描述了一段符合语言语法的程序，对于计算机而言的真正含义，是开发者最终要传达给计算机的意愿和指令。语言的语义必须是准确的、无二义性的，编译器也正是通过语义的指导，将计算机程序翻译为计算机可识别的表达形式。")]),v._v(" "),_("h2",{attrs:{id:"三、程序的翻译"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、程序的翻译"}},[v._v("#")]),v._v(" 三、程序的翻译")]),v._v(" "),_("p",[v._v("计算机程序是用来供人阅读和修改的，计算机硬件并不能理解程序内的思想和含义。因此，必须有一个翻译转换的过程，将人所表达的意愿准确无误地传递给计算机，让计算机明确并执行人下发的指令。实现这种翻译工作的工具就是编译器或解释器。")]),v._v(" "),_("p",[v._v("对于编译器来说，它的输入是人类书写的计算机语言程序，输出则是计算机可识别的底层表示。首先，它需要识别出程序中的单词，即词法分析。然后，根据单词的组合模式识别出程序的语法结构，即语法分析。最后，根据不同的语法结构对应的语义，将程序按照每个语法模块的形式转换为计算机可识别的指令序列，即语义分析和目标代码生成。")]),v._v(" "),_("p",[v._v("众所周知编译器的实现具有一定的复杂度，其根本原因来自于语言语法的结构灵活性和计算机底层表达形式的多样性，这也是创造一门编程语言最核心的环节。")]),v._v(" "),_("h2",{attrs:{id:"四、二进制存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、二进制存储"}},[v._v("#")]),v._v(" 四、二进制存储")]),v._v(" "),_("p",[v._v("编译器将语言程序翻译转换后，需要将转换后的结果存储起来，以便计算机在需要的时候将其加载、执行。这里不可避免的涉及到两个问题：")]),v._v(" "),_("p",[v._v("（1）转换后的结果是什么样的形式？")]),v._v(" "),_("p",[v._v("（2）转换后的结果保存在哪里？")]),v._v(" "),_("p",[v._v("第一个问题描述的是计算机程序被转换为怎样的形式，才是计算机可以识别的。由于计算机中实际运行程序的硬件模块是CPU，因此计算机程序只有被转换为CPU的二进制指令格式才能被正确识别、执行。比如常见的Intel体系的CISC指令格式、ARM体系的RISC执行格式等。")]),v._v(" "),_("p",[v._v("第二个问题描述的是计算机程序转化为二进制指令格式后，以什么样的方式保存在计算机的磁盘上。由于绝大多数的计算机程序是需要通过运行在计算机硬件之上的操作系统加载运行的，因此计算机程序的二进制表达形式必须以对应操作系统可识别的文件格式存储。比如常见的Windows操作系统的PE文件格式、Linux操作系统的ELF文件格式等。")]),v._v(" "),_("h2",{attrs:{id:"五、运行时环境和标准库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、运行时环境和标准库"}},[v._v("#")]),v._v(" 五、运行时环境和标准库")]),v._v(" "),_("p",[v._v("理论上讲，一门编程语言如果能提供出完备的操纵操作系统和硬件的原子性功能就已经成功了。但是不提供强大的运行时环境支持和标准库，是很难让一门编程语言真正的好用和流行的。没有人希望简单地打印一行字符串，还需要使用编程语言提供的基本特性实现调用操作系统提供的打印接口的逻辑。Java语言之所以久兴不衰，正是因为它不仅提供了完善的运行时环境和开发库支持，甚至提供了更强大的开发框架和工具支持。")]),v._v(" "),_("p",[v._v("因此可见，除了完备的语言特性，为开发者提供更方便好用的库和框架支持，消除软件构建过程中复杂和重复的逻辑，才是一门优秀编程语言的长盛之道。")]),v._v(" "),_("h2",{attrs:{id:"六、自己动手-立即开始"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、自己动手-立即开始"}},[v._v("#")]),v._v(" 六、自己动手，立即开始！")]),v._v(" "),_("p",[v._v("《自己动手构造编译系统——编译、汇编与链接》一书详细阐述了一门编程语言从无到有的过程，从语言的功能特性设计，到词法、文法、语义分析；从编译器、汇编器的设计实现，到目标文件的链接生成可执行文件；甚至编译优化器的实现、二进制指令、可执行文件格式以及语言运行时和标准库的概念，都在书中做了认真细致地剖析。相信对本书的阅读，将是一次不错的获得知识的体验！")])])}),[],!1,null,null,null);_.default=s.exports}}]);