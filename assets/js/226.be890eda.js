(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{518:function(t,a,s){"use strict";s.r(a);var n=s(10),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript面试题"}},[t._v("#")]),t._v(" JavaScript面试题")]),t._v(" "),a("h2",{attrs:{id:"概念题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念题"}},[t._v("#")]),t._v(" 概念题")]),t._v(" "),a("h3",{attrs:{id:"变量和类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和类型"}},[t._v("#")]),t._v(" 变量和类型")]),t._v(" "),a("ul",[a("li",[t._v("说说基本数据类型与引用数据类型的区别")]),t._v(" "),a("li",[t._v("说说js的堆内存与栈内存")]),t._v(" "),a("li",[t._v("var let const的区别")]),t._v(" "),a("li",[t._v("null 与 undefined的区别")]),t._v(" "),a("li",[t._v("typeof instanceof isPrototypeOf Object.toString.call的区别")]),t._v(" "),a("li",[t._v("深拷贝与浅拷贝，数组深拷贝方法")]),t._v(" "),a("li",[t._v("== 与 === 的区别，js的类型转换")]),t._v(" "),a("li",[t._v("如何检测js对象是数组类型")])]),t._v(" "),a("h3",{attrs:{id:"原型和原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[t._v("#")]),t._v(" 原型和原型链")]),t._v(" "),a("ul",[a("li",[t._v("new一个对象的内部逻辑，自己实现一个new")])]),t._v(" "),a("h3",{attrs:{id:"作用域和闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域和闭包"}},[t._v("#")]),t._v(" 作用域和闭包")]),t._v(" "),a("ul",[a("li",[t._v("说说this的指向，call和apply的作用和区别")]),t._v(" "),a("li",[t._v("普通函数和箭头函数的区别")])]),t._v(" "),a("h3",{attrs:{id:"执行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行机制"}},[t._v("#")]),t._v(" 执行机制")]),t._v(" "),a("ul",[a("li",[t._v("Promise用法、自己实现一个")]),t._v(" "),a("li",[t._v("JS异步解决方案")]),t._v(" "),a("li",[t._v("宏任务/微任务")])]),t._v(" "),a("h3",{attrs:{id:"语法和api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法和api"}},[t._v("#")]),t._v(" 语法和API")]),t._v(" "),a("ul",[a("li",[t._v("数组的map、reduce用法")]),t._v(" "),a("li",[t._v("说说Set、Map、WeakSet、WeakMap")])]),t._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("编译型语言和解释性语言的区别")]),t._v(" "),a("ul",[a("li",[t._v("非独立")]),t._v(" "),a("li",[t._v("效率低")])])])]),t._v(" "),a("p",[t._v("解释性语言和编译性语言的定义：\n计算机不能直接理解高级语言，只能直接理解机器语言，所以必须要把高级语言翻译成机器语言，计算机才能执行高级语言编写的程序。\n翻译的方式有两种，一个是编译，一个是解释。两种方式只是翻译的时间不同。")]),t._v(" "),a("p",[t._v("解释性语言的定义：\n解释性语言的程序不需要编译，在运行程序的时候才翻译，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低。\n现代解释性语言通常把源程序编译成中间代码，然后用解释器把中间代码一条条翻译成目标机器代码，一条条执行。")]),t._v(" "),a("p",[t._v("编译性语言的定义：\n编译性语言写的程序在被执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高。")]),t._v(" "),a("h2",{attrs:{id:"编程题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程题"}},[t._v("#")]),t._v(" 编程题")]),t._v(" "),a("p",[t._v("1、如何让： "),a("code",[t._v("a == 1 && a == 2 && a == 3")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);