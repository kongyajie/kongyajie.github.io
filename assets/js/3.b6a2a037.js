(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{280:function(t,s,a){t.exports=a.p+"assets/img/bl_1_stack.1f701599.png"},281:function(t,s,a){t.exports=a.p+"assets/img/bl_2_stack.20cdc71a.png"},282:function(t,s,a){t.exports=a.p+"assets/img/bl_3_heap.57f2ed43.png"},283:function(t,s,a){t.exports=a.p+"assets/img/bl_4_copy.c2214f47.png"},284:function(t,s,a){t.exports=a.p+"assets/img/bl_5_copy.2b7bb750.png"},285:function(t,s,a){t.exports=a.p+"assets/img/bl_6_compare.623b8f3a.png"},286:function(t,s,a){t.exports=a.p+"assets/img/bl_7_null.dbf1c51e.png"},360:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"你真的掌握变量和类型了吗-一-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你真的掌握变量和类型了吗-一-数据类型"}},[t._v("#")]),t._v(" 你真的掌握变量和类型了吗（一）数据类型")]),t._v(" "),s("h2",{attrs:{id:"导读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导读"}},[t._v("#")]),t._v(" 导读")]),t._v(" "),s("p",[t._v("变量和类型是学习 "),s("code",[t._v("Javascript")]),t._v(" 最先接触到的东西，但是往往看起来最简单的东西往往还隐藏着很多你不了解、或者容易犯错的知识，比如下面几个问题：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Javascript")]),t._v(" 中的变量在内存中的具体存储形式是什么？")]),t._v(" "),s("li",[s("code",[t._v("0.1+0.2")]),t._v(" 为什么不等于 "),s("code",[t._v("0,3")]),t._v(" ？发生小数计算错误的具体原因是什么？")]),t._v(" "),s("li",[s("code",[t._v("Symbol")]),t._v(" 的特点，以及实际应用场景是什么？")]),t._v(" "),s("li",[s("code",[t._v("[] == ![]")]),t._v(" 、"),s("code",[t._v("[undefined] == false")]),t._v(" 为什么等于 "),s("code",[t._v("true")]),t._v(" ？代码中何时会发生隐式类型转换？转换的规则是什么？")]),t._v(" "),s("li",[t._v("如何精确的判断变量的类型？")])]),t._v(" "),s("p",[t._v("如果你还不能很好的解答上面的问题，那说明你还没有完全掌握这部分的知识，那么请好好阅读下面的文章吧。")]),t._v(" "),s("p",[t._v("本文从底层原理到实际应用详细介绍了 "),s("code",[t._v("Javascript")]),t._v(" 中的变量和类型相关知识。")]),t._v(" "),s("h2",{attrs:{id:"一、javascript数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript数据类型"}},[t._v("#")]),t._v(" 一、JavaScript数据类型")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/9.0/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript标准"),s("OutboundLink")],1),t._v(" 规定了7中数据类型，其把这7种数据类型又分为两种：原始类型和对象类型。")]),t._v(" "),s("p",[s("strong",[t._v("原始类型")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Null")]),t._v("：只包含一个值 "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("Undefined")]),t._v("：只包含一个值 "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("Boolean")]),t._v("：包含两个值 "),s("code",[t._v("true")]),t._v(" 和 "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("Number")]),t._v("：整数或浮点数，还有一些特殊值（"),s("code",[t._v("-Infinity")]),t._v("、"),s("code",[t._v("+Infinity")]),t._v("、"),s("code",[t._v("NaN")]),t._v("）")]),t._v(" "),s("li",[s("code",[t._v("String")]),t._v("：一串表示文本值的字符序列")]),t._v(" "),s("li",[s("code",[t._v("Symbol")]),t._v("：一种实例是唯一且不可改变的数据类型")])]),t._v(" "),s("p",[t._v("（在 "),s("code",[t._v("ES10")]),t._v(" 中加入了第七种原始类型 "),s("code",[t._v("BigInt")]),t._v("，现已被最新 "),s("code",[t._v("Chrome")]),t._v(" 支持）")]),t._v(" "),s("p",[s("strong",[t._v("对象类型")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object")]),t._v("：自己分一类丝毫不过分，除了常用的 "),s("code",[t._v("Object")]),t._v("，"),s("code",[t._v("Array")]),t._v("、"),s("code",[t._v("Function")]),t._v(" 等都属于特殊的对象")])]),t._v(" "),s("h2",{attrs:{id:"二、为什么区分原始类型和对象类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么区分原始类型和对象类型"}},[t._v("#")]),t._v(" 二、为什么区分原始类型和对象类型")]),t._v(" "),s("h3",{attrs:{id:"_2-1-不可变性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-不可变性"}},[t._v("#")]),t._v(" 2.1 不可变性")]),t._v(" "),s("p",[t._v("上面所提到的原始类型，在 "),s("code",[t._v("ECMAScript")]),t._v(" 标准中，它们被定义为 "),s("code",[t._v("primitive values")]),t._v("，即原始值，代表值本身是不可被改变的。")]),t._v(" "),s("p",[t._v("以字符串为例，我们在调用操作字符串的方法时，没有任何方法是可以直接改变字符串的：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AaronKong")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在上面的代码中我们对 "),s("code",[t._v("str")]),t._v(" 调用了几个方法，无一例外，这些方法都在原字符串的基础上产生了一个新字符串，而非直接去改变 "),s("code",[t._v("str")]),t._v("，这就印证了字符串的不可变性。")]),t._v(" "),s("p",[t._v("那么，当我们继续调用下面的代码：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'6'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AaronKong6")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("你会发现， "),s("code",[t._v("str")]),t._v(" 的值被改变了，这不就打脸了字符串的不可变性么？其实不然，我们从内存上来理解：")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("JavaScript")]),t._v(" 中，每一个变量在内存中都需要一个空间来存储。")]),t._v(" "),s("p",[t._v("内存空间又被分为两种，栈内存与堆内存。")]),t._v(" "),s("p",[t._v("栈内存：")]),t._v(" "),s("ul",[s("li",[t._v("存储的值大小固定")]),t._v(" "),s("li",[t._v("空间较小")]),t._v(" "),s("li",[t._v("可以直接操作其保存的变量，运行效率高")]),t._v(" "),s("li",[t._v("由系统自动分配存储空间")])]),t._v(" "),s("p",[s("code",[t._v("JavaScript")]),t._v(" 中的原始类型的值被直接存储在栈中，在变量定义时，栈就为其分配好了内存空间。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(280),alt:""}})]),t._v(" "),s("p",[t._v("由于栈中内存空间的大小是固定的，那么注定了存储在栈中的变量就是不可变的。")]),t._v(" "),s("p",[t._v("在上面的代码中，我们执行了 "),s("code",[t._v("str += '6'")]),t._v(" 的操作，实际上是在栈中又开辟了一块内存空间用于存储 "),s("code",[t._v("AaronKong6")]),t._v("，然后将变量 "),s("code",[t._v("str")]),t._v(" 指向这块空间，所以这并不违背 "),s("code",[t._v("不可变性的")]),t._v(" 特点。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(281),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-2-引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-引用类型"}},[t._v("#")]),t._v(" 2.2 引用类型")]),t._v(" "),s("p",[t._v("堆内存：")]),t._v(" "),s("ul",[s("li",[t._v("存储的值大小不定，可动态调整")]),t._v(" "),s("li",[t._v("空间较大，运行效率低")]),t._v(" "),s("li",[t._v("无法直接操作其内部存储，使用引用地址读取")]),t._v(" "),s("li",[t._v("通过代码进行分配空间")])]),t._v(" "),s("p",[t._v("相对与上面具有不可变性的原始类型，我习惯把对象称为引用对象，引用类型的值实际存储在堆内存中，它在栈中只存储了一个固定长度的地址，这个地址指向堆内存中的值。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Aaronkong"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("obj3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("img",{attrs:{src:a(282),alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("由于内存是有限的，这些变量不可能一直在内存中占用资源，这里推荐下这篇文章 "),s("a",{attrs:{href:"https://juejin.im/post/5cb33660e51d456e811d2687",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript中的垃圾回收和内存泄露"),s("OutboundLink")],1),t._v("，这里告诉你 "),s("code",[t._v("JavaScript")]),t._v(" 是如何进行垃圾回收以及可能会发生内存泄露的一些场景。")])]),t._v(" "),s("p",[t._v("当然，引用类型就不再具有 "),s("code",[t._v("不可变性")]),t._v(" 了，我们可以轻易的改变它们：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong6'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {name: "AaronKong6"}')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {age: 19}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("以数组为例，它的很多方法都可以改变它自身。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pop()")]),t._v(" 删除数组最后一个元素，如果数组为空，则不改变数组，返回undefined，改变原数组，返回被删除的元素")]),t._v(" "),s("li",[s("code",[t._v("push()")]),t._v(" 向数组末尾添加一个多多个元素，改变原数组，返回新数组的长度")]),t._v(" "),s("li",[s("code",[t._v("shift()")]),t._v(" 把数组的第一个元素删除，若空数组，不进行任何操作，返回undefined，改变原数组，返回第一个元素的值")]),t._v(" "),s("li",[s("code",[t._v("unshift()")]),t._v(" 向数组的开头添加一个或多个元素，改变原数组，返回新数组的长度")]),t._v(" "),s("li",[s("code",[t._v("reverse()")]),t._v(" 颠倒数组中元素的顺序，改变原数组，返回该数组")]),t._v(" "),s("li",[s("code",[t._v("sort()")]),t._v(" 对数组元素进行排序，改变原数组，返回改数组")]),t._v(" "),s("li",[s("code",[t._v("splice()")]),t._v(" 从数据中添加/删除项目，改变原数组，返回被删除的元素")])]),t._v(" "),s("p",[t._v("下面我们通过几个操作来对比一下原始类型和引用类型的区别：")]),t._v(" "),s("h3",{attrs:{id:"_2-3-复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-复制"}},[t._v("#")]),t._v(" 2.3 复制")]),t._v(" "),s("p",[t._v("当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的，先来看看原始类型：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nname2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'孔先生你好'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AaronKong")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("img",{attrs:{src:a(283),alt:""}})]),t._v(" "),s("p",[t._v("内存中有一个变量 "),s("code",[t._v("name")]),t._v("，值为 "),s("code",[t._v("AaronKong")]),t._v(" 。我们从变量 "),s("code",[t._v("name")]),t._v(" 中复制一个变量 "),s("code",[t._v("name2")]),t._v(" ，此时在内存中创建了一块新的空间用于存储 "),s("code",[t._v("Aaronkong")]),t._v("，虽然两者值是相同的，但是两者指向的内存空间完全不同，这两个变量参与任何操作都互不影响。")]),t._v(" "),s("p",[t._v("复制一个引用类型：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'孔先生你好'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 孔先生你好")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("img",{attrs:{src:a(284),alt:""}})]),t._v(" "),s("p",[t._v("当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的 "),s("code",[t._v("obj2")]),t._v(" 实际上和 "),s("code",[t._v("obj")]),t._v(" 指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会受到影响，这就是为什么会有深拷贝和浅拷贝的原因。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-比较"}},[t._v("#")]),t._v(" 2.4 比较")]),t._v(" "),s("p",[t._v("当我们在对两个变量进行比较时，不同类型的变量的表现是不同的：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(285),alt:""}})]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("对比原始类型，比较时会直接比较它们的值，如果值相等，即返回 "),s("code",[t._v("true")]),t._v("。")]),t._v(" "),s("p",[t._v("对于引用类型，比较时会比较它们的引用地址，虽然两个变量在堆中存储的对象具有的属性值都是相等的，但是它们被存储在了不同的存储空间，因此比较值为 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_2-5-值传递和引用传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-值传递和引用传递"}},[t._v("#")]),t._v(" 2.5 值传递和引用传递")]),t._v(" "),s("p",[t._v("借助下面的例子，我们先来看一看什么是值传递，什么是引用传递：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Aaron'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'孔先生你好'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("执行上面的代码，如果最终打印出来的 "),s("code",[t._v("name")]),t._v(" 是 "),s("code",[t._v("AaronKong")]),t._v("，没有改变，说明函数参数传递的是变量的值，即值传递。如果最终打印的是 "),s("code",[t._v("孔先生你好")]),t._v("，函数内部的操作可以改变传入的变量，那么说明函数参数传递的是引用，即引用传递。")]),t._v(" "),s("p",[t._v("很明显，上面的执行结果是 "),s("code",[t._v("AaronKong")]),t._v(" ，即函数参数仅仅是被传入变量复制给了的一个局部变量，改变这个局部变量不会对外部变量产生影响。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'孔先生你好'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 孔先生你好")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("上面的代码可能让你产生疑惑，是不是参数是引用类型就是引用传递呢？")]),t._v(" "),s("p",[t._v("首先明确一点， "),s("code",[t._v("ECMAScript")]),t._v(" 中所有的函数的参数都是按值传递的。")]),t._v(" "),s("p",[t._v("同样的，当函数参数是引用类型时，我们同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址而已，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递，下面我们再看一个例子：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AaronKong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'孔先生你好'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AaronKong")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("可见，函数参数传递的并不是变量的引用，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址。所以，再次记住：")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("ECMAScript")]),t._v(" 中所有的函数的参数都是按值传递的。")])]),t._v(" "),s("h2",{attrs:{id:"三、分不清的-null-和-undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、分不清的-null-和-undefined"}},[t._v("#")]),t._v(" 三、分不清的 null 和 undefined")]),t._v(" "),s("p",[s("img",{attrs:{src:a(286),alt:"img"}})]),t._v(" "),s("p",[t._v("在原始类型中，有两个类型 "),s("code",[t._v("Null")]),t._v(" 和 "),s("code",[t._v("Undefined")]),t._v("，他们都有且仅有一个值，"),s("code",[t._v("null")]),t._v(" 和 "),s("code",[t._v("undefined")]),t._v(" ，并且他们都代表无和空：")]),t._v(" "),s("h3",{attrs:{id:"null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" null")]),t._v(" "),s("p",[t._v("表示被赋值过的对象，刻意把一个对象赋值为 "),s("code",[t._v("null")]),t._v("，故意表示其为空，不应有值。")]),t._v(" "),s("p",[t._v("所以对象的某个属性值未 "),s("code",[t._v("null")]),t._v(" 是正常的，"),s("code",[t._v("null")]),t._v(" 转换为数值时值为 "),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[t._v("#")]),t._v(" undefined")]),t._v(" "),s("p",[t._v("表示“缺少值”，即此处应有一个值，但还没有定义。")]),t._v(" "),s("p",[t._v("如果一个对象的某个属性值为 "),s("code",[t._v("undefined")]),t._v("，这是不正常的，如"),s("code",[t._v("obj.name=undefined")]),t._v("，我们不应该这样写，应该直接 "),s("code",[t._v("delete obj.name")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("undefined")]),t._v("转为数值时未 "),s("code",[t._v("NaN")]),t._v("（非数字值的特殊值）")]),t._v(" "),s("p",[s("code",[t._v("JavaScript")]),t._v("是一门动态类型语言，成员除了表示存在的空值外，还有可能根本就不存在（因为存不存在只有在运行期才知道），这就是"),s("code",[t._v("undefined")]),t._v("的意义所在。对于"),s("code",[t._v("Java")]),t._v("这种强类型语言，如果有"),s("code",[t._v("undefined")]),t._v("这种情况，就会直接编译失败，所以它不需要一个这样的类型。")]),t._v(" "),s("h2",{attrs:{id:"四、不太熟的sybmbol类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、不太熟的sybmbol类型"}},[t._v("#")]),t._v(" 四、不太熟的Sybmbol类型")]),t._v(" "),s("p",[s("code",[t._v("Symbol")]),t._v("类型是"),s("code",[t._v("ES6")]),t._v("中新加入的一种原始类型。")]),t._v(" "),s("blockquote",[s("p",[t._v("每个从Symbol()返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。")])]),t._v(" "),s("h2",{attrs:{id:"五、不老实的number类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、不老实的number类型"}},[t._v("#")]),t._v(" 五、不老实的Number类型")]),t._v(" "),s("p",[t._v("为什么说 "),s("code",[t._v("Number")]),t._v(" 类型不老实呢，相信大家多多少少的在开发中遇到过小数计算不精确的问题，比如 "),s("code",[t._v("0.1+0.2!==0.3")]),t._v("，下面我们来追本溯源，看看为什么会出现这种现象，以及该如何避免。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.aaronkong.top/article/JS%E8%BF%9B%E9%98%B6/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浮点数精度问题"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"javascript能表示的最大数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript能表示的最大数字"}},[t._v("#")]),t._v(" JavaScript能表示的最大数字")]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("IEEE 754")]),t._v(" 双精度64位规范的限制：")]),t._v(" "),s("p",[s("code",[t._v("指数位")]),t._v("能表示的最大数字："),s("code",[t._v("1023")]),t._v(" （十进制）\n"),s("code",[t._v("尾数位")]),t._v("能表达的最大数字即尾数位都为 "),s("code",[t._v("1")]),t._v(" 的情况")]),t._v(" "),s("p",[t._v("所以JavaScript能表示的最大数字为 1.111... X 2 "),s("sup",[t._v("1023")]),t._v("，这个结果转换成十进制是 1.7976931348623157e+308，这个结果即为 "),s("code",[t._v("Number.MAX_VALUE")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"最大安全数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大安全数字"}},[t._v("#")]),t._v(" 最大安全数字")]),t._v(" "),s("p",[t._v("JavaScript 中 "),s("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v(" 表示最大安全数字，计算结果是 "),s("code",[t._v("9007199254740991")]),t._v("，即在这个数范围内不会出现精度丢失（小数除外），这个数实际上是 1.111... X 2"),s("sup",[t._v("52")]),t._v("。")]),t._v(" "),s("p",[t._v("我们同样可以用一些开源库来处理大整数：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/justmoon/node-bignum",target:"_blank",rel:"noopener noreferrer"}},[t._v("node-bignum"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/substack/node-bigint",target:"_blank",rel:"noopener noreferrer"}},[t._v("node-bigint"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("其实官方也考虑到了这个问题，"),s("code",[t._v("bigInt")]),t._v("类型在"),s("code",[t._v("es10")]),t._v("中被提出，现在"),s("code",[t._v("Chrome")]),t._v("中已经可以使用，使用"),s("code",[t._v("bigInt")]),t._v("可以操作超过最大安全数字的数字。")])])}),[],!1,null,null,null);s.default=e.exports}}]);